
import streamlit as st
import os
import faiss
import pickle
import numpy as np
from openai import OpenAI
from langdetect import detect
from dotenv import load_dotenv
import csv
from datetime import datetime
import pandas as pd
import json
from fuzzywuzzy import fuzz
from rank_bm25 import BM25Okapi
from nltk.tokenize import word_tokenize
import nltk
import os

nltk.download('all')


load_dotenv()

# üîê API anahtarƒ± doƒürudan girildi
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# üì¶ FAISS index ve metinler
index = faiss.read_index("data/embeddings/index.faiss")
with open("data/embeddings/texts.pkl", "rb") as f:
    texts = pickle.load(f)
    
# üìö Netmera FAQ JSON dosyasƒ±nƒ± y√ºkle
with open("data/faq_answers.json", "r", encoding="utf-8") as f:
    faq_qa_map = json.load(f)

corpus = [doc["text"] for doc in texts]
tokenized_corpus = [word_tokenize(doc.lower()) for doc in corpus]
bm25_model = BM25Okapi(tokenized_corpus)

def compute_hybrid_score(doc, bm25_score, faiss_score, fuzzy_score):
    norm_bm25 = bm25_score / 100
    norm_faiss = -faiss_score  # √ß√ºnk√º FAISS uzaklƒ±k: daha k√º√ß√ºk daha iyi
    norm_fuzzy = fuzzy_score / 100
    return 0.4 * norm_bm25 + 0.3 * norm_fuzzy + 0.3 * norm_faiss

# ‚úÖ Kullanƒ±cƒ±nƒ±n sorusu sƒ±k sorulardan biriyle e≈üle≈üiyor mu?
def check_faq_match(user_input, threshold=80):
    # üîÑ T√ºrk√ßeyi ƒ∞ngilizceye √ßevir
    try:
        translation = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "Translate the question to English. If it's already in English, return it as-is. Only return the sentence.",
                },
                {"role": "user", "content": user_input},
            ],
        )
        translated_input = translation.choices[0].message.content.strip()
    except Exception:
        translated_input = user_input

    # üîç FAQ e≈üle≈ümesi (fuzzy)
    best_score = 0
    best_answer = None
    best_source = None

    for key, entry in faq_qa_map.items():
        score = fuzz.partial_ratio(translated_input.lower(), key.replace("_", " ").lower())
        if score > best_score:
            best_score = score
            best_answer = entry["answer"]
            best_source = entry["source"]

    if best_score >= threshold:
        return f"{best_answer}\n\nüìÑ **Kaynak belge**: [FAQ]({best_source})"
    return None

# üîÅ Belirli dosyalar i√ßin manuel URL e≈ülemeleri
file_to_url_map = {
    "netmera-user-guide-messages-e-mail-email-onboarding-iys-ileti-yoenetim-sistemi.txt": "https://user.netmera.com/netmera-user-guide/messages/email/email-onboarding/iys-ileti-yonetim-sistemi",
    "netmera-user-guide-customer-data-iys-integration.txt": "https://user.netmera.com/netmera-user-guide/customer-data/iys-integration",
    "netmera-user-guide-messages-multi-language-push.txt": "https://user.netmera.com/netmera-user-guide/messages/multi-language-push",
    "netmera-user-guide-beginners-guide-to-netmera-troubleshooting-and-support.txt": "https://user.netmera.com/netmera-user-guide/beginners-guide-to-netmera/troubleshooting-and-support",
    "netmera-user-guide-beginners-guide-to-netmera-faq.txt": "https://user.netmera.com/netmera-user-guide/beginners-guide-to-netmera/faqs",
    "netmera-user-guide-beginners-guide-to-netmera-app-dashboard.txt": "https://user.netmera.com/netmera-user-guide/beginners-guide-to-netmera/app-dashboard",
    "netmera-user-guide-messages-mobile-push-creating-a-mobile-push.txt": "https://user.netmera.com/netmera-user-guide/messages/mobile-push/creating-a-mobile-push",
    "netmera-user-guide-messages-mobile-push-creating-a-mobile-push-define-notification-content-what.txt": "https://user.netmera.com/netmera-user-guide/messages/mobile-push/creating-a-mobile-push/define-notification-content-what",
    "netmera-user-guide-messages-mobile-push-creating-a-mobile-push-define-notification-content-what-advanced-ios-settings.txt": "https://user.netmera.com/netmera-user-guide/messages/mobile-push/creating-a-mobile-push/define-notification-content-what/advanced-ios-settings",
    "netmera-user-guide-messages-email-sending-a-mail-campaign.txt": "https://user.netmera.com/netmera-user-guide/messages/email/sending-a-mail-campaign",
    "netmera-user-guide-messages-email-sending-a-mail-campaign-step-1-setup.txt": "https://user.netmera.com/netmera-user-guide/messages/email/sending-a-mail-campaign/step-1-setup",
    "netmera-user-guide-messages-sms-sms-onboarding.txt": "https://user.netmera.com/netmera-user-guide/messages/sms/sms-onboarding",
}

# üìÅ Compound klas√∂r fallback'leri
compound_sections = [
    "customer-data",
    "email-onboarding",
    "message-categories",
    "mobile-push",
    "push-notifications",
    "beginners-guide-to-netmera",
    "email",
    "sms",
]

# üìÇ √úst seviye ve alt seviye klas√∂rler ‚Äî Sidebar yapƒ±sƒ±na g√∂re
top_level_sections = {
    "messages": [
        "about-push-notifications",
        "mobile-push",
        "sms",
        "email",
        "automated-messages",
        "transactional-messages",
        "geofence-messages",
        "push-a-b-testing",
        "file-transfer-protocol-ftp-push",
        "multi-language-push",
        "recall-campaigns",
        "netmera-ai-text-generator",
    ],
    "customer-data": [
        "about-customer-data",
        "autotracking",
        "events",
        "profile-attributes",
    ],
    "beginners-guide-to-netmera": [
        "introduction-to-netmera",
        "integrating-netmera",
        "faq",
        "app-dashboard",
        "your-feedback",
        "design-guide",
        "troubleshooting-and-support",
    ],
}
def detect_language(text):
    try:
        lang_code = detect(text)
        if lang_code == "tr":
            return "T√ºrk√ße"
        else:
            return "English"
    except:
        return "English"  # Default

def filename_to_url(filename: str) -> str:
  
    if filename.startswith("faq-"):
        return "https://user.netmera.com/netmera-user-guide/beginners-guide-to-netmera/faqs"

    if filename in file_to_url_map:
        return file_to_url_map[filename]

    name = filename.replace(".txt", "")
    if name.startswith("netmera-user-guide-"):
        name = name[len("netmera-user-guide-") :]

    parts = name.split("-")
    base_url = "https://user.netmera.com/netmera-user-guide"

    for top_level, subfolders in top_level_sections.items():
        if parts[0] == top_level:
            rest = parts[1:]
            for i in range(2, 5):
                candidate = "-".join(rest[:i])
                if candidate in subfolders:
                    section = candidate
                    return f"{base_url}/{top_level}/{section}/{'-'.join(rest[i:])}"
            return f"{base_url}/{top_level}/{'-'.join(rest)}"

    for i in range(2, 6):
        candidate = "-".join(parts[:i])
        if candidate in compound_sections:
            section = candidate
            rest = parts[i:]
            return f"{base_url}/{section}/{'-'.join(rest)}"

    return f"{base_url}/{'/'.join(parts)}"

    return f"{base_url}/{'/'.join(parts)}"



def embed_question(question):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "Translate the question to English. If it's already in English, return it as-is. Only return the sentence.",
                },
                {"role": "user", "content": question},
            ],
        )
        translated = response.choices[0].message.content.strip()
    except Exception as e:
        translated = question

    response_embed = client.embeddings.create(
        input=[translated], model="text-embedding-ada-002"
    )
    return np.array(response_embed.data[0].embedding, dtype=np.float32).reshape(1, -1), translated


def log_interaction(question, answer, source_file, faiss_score):
    with open(
        "logs/conversation_log.csv", "a", newline="", encoding="utf-8"
    ) as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(
            [
                datetime.now(),
                question,
                source_file,
                faiss_score,
                answer.replace("\n", " "),
            ]
        )


def ask_openai(question, context, lang="English"):
    system_prompt = """
You are NetmerianBot, a knowledgeable assistant specialized in Netmera's features and documentation.

Your job is to answer the user's question using only the provided content. If the content contains relevant information, provide a clear, concise answer. 

Guidelines:
- Use only the content below.
- Do not mention training data or your knowledge cut-off.
- Rephrase and summarize naturally.
- If the content does not answer the question, respond with: "There is no relevant information available."
"""

    user_prompt = f"""
CONTENT:
{context}

QUESTION:
{question}
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    english_answer = response.choices[0].message.content.strip()

    if lang == "T√ºrk√ße":
        translation = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": ("You are a professional translator. Translate the following response to Turkish accurately and naturally."
                                               "‚ö†Ô∏è However, do NOT translate technical terms like 'Send All', 'Push Notification', 'Segment', 'SDK', etc. "
                                               "Keep them exactly as they are. Do not add anything."),},
                {"role": "user", "content": english_answer},
            ],
        )
        turkish_answer = translation.choices[0].message.content.strip()
        if len(turkish_answer) < 5:
            return english_answer
        return turkish_answer
    else:
        return english_answer

lang_manual = st.toggle("üåê Dili manuel se√ß", value=False)
if lang_manual:
    lang = st.radio("Dil / Language", ("T√ºrk√ße", "English"), horizontal=True)
else:
    lang = None  

st.set_page_config(page_title="NetmerianBot", layout="centered")
st.title("ü§ñ NetmerianBot")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if lang == "T√ºrk√ße":
    st.markdown("### üìå Sƒ±k Sorulan Konular")
    faq_questions = [
        "Push g√∂nderiminde 'Send All' √∂zelliƒüi t√ºm kullanƒ±cƒ±lara ula≈üƒ±r mƒ±?",
        "Toplu mesaj g√∂nderimi yarƒ±da durdurulabilir mi?",
        "Netmera SDK hangi kullanƒ±cƒ± davranƒ±≈ülarƒ±nƒ± takip eder?",
        "Push g√∂nderim ba≈üarƒ±sƒ±z olduƒüunda sistem uyarƒ± verir mi?",
        "Segmentler ne zaman pasif hale gelir?",
        "Push g√∂nderiminde buton eklemek API ile m√ºmk√ºn m√º?",
        "Netmera, kullanƒ±cƒ± uygulamayƒ± silince bunu nasƒ±l anlar?",
        "Funnel verileri neden deƒüi≈üiklik g√∂sterir?",
        "Netmera web'de anonim kullanƒ±cƒ±larƒ± nasƒ±l izler?",
    ]
    input_placeholder = "Bir soru yazƒ±n..."
    no_info_message = "‚ö†Ô∏è Bu konuda yeterli bilgi yok. L√ºtfen daha a√ßƒ±k ≈üekilde sorun."
else:
    st.markdown("### üìå Frequently Asked Questions")
    faq_questions = [
        "If the ‚ÄòSend All‚Äô option is selected for a push notification in the Netmera panel, will it be delivered to all users, even those who are not integrated with Netmera?",
        "Can I stop bulk push sending midway?",
        "Which user behaviors does Netmera SDK track?",
        "Does Netmera warn if a push fails?",
        "When do segments become inactive?",
        "Can buttons be added to push via API?",
        "How does Netmera detect when a user uninstalls the app?",
        "Why do funnel values fluctuate?",
        "How does Netmera track anonymous web users?",
    ]
    input_placeholder = "Type a question..."
    no_info_message = (
        "‚ö†Ô∏è There is not enough information on this topic. Please ask more clearly."
    )

cols = st.columns(2)
selected_question = None
for i, q in enumerate(faq_questions):
    if cols[i % 2].button(q, key=f"faq_{i}"):
        selected_question = q

user_input = st.chat_input(input_placeholder)

if selected_question and not user_input:
    user_input = selected_question

if user_input and (len(st.session_state.chat_history) == 0 or user_input != st.session_state.chat_history[-1][1]):
    faq_response = check_faq_match(user_input)
    
    if faq_response:
        answer = faq_response
        st.session_state.chat_history.append(("user", user_input))
        st.session_state.chat_history.append(("assistant", answer))

    else:
        if not lang:
            lang = detect(user_input)
            if lang not in ["en", "tr"]:
                lang = "English"
            elif lang == "tr":
                lang = "T√ºrk√ße"
            else:
                lang = "English"
            st.info(f"üß† Algƒ±lanan dil: {lang}")

        st.session_state.chat_history.append(("user", user_input))
        embedding, translated_input = embed_question(user_input)
        tokenized_query = word_tokenize(user_input.lower())
        bm25_scores = bm25_model.get_scores(tokenized_query)
        candidate_docs = []
        for idx, doc in enumerate(texts):
            doc_embedding = index.reconstruct(idx)
            faiss_score = np.linalg.norm(doc_embedding - embedding)
            bm25_score = bm25_scores[idx]
            fuzzy_score = fuzz.partial_ratio(translated_input.lower(), doc["text"][:1000].lower())
            hybrid = compute_hybrid_score(doc, bm25_score, faiss_score, fuzzy_score)
            
            doc["faiss_score"] = faiss_score
            doc["bm25_score"] = bm25_score
            doc["fuzzy_score"] = fuzzy_score
            doc["hybrid_score"] = hybrid
            candidate_docs.append(doc)
        

        best_doc = max(candidate_docs, key=lambda d: d["hybrid_score"])
        top_docs = sorted(candidate_docs, key=lambda d: d["hybrid_score"], reverse=True)[:3]
        top_k_context = "\n\n---\n\n".join([doc["text"] for doc in top_docs])
        answer_text = ask_openai(user_input, top_k_context, lang)
        source_file = best_doc["source"]
        source_url = filename_to_url(source_file)
        answer = f"{answer_text}\n\nüìÑ **Kaynak belge**: [{source_file}]({source_url})"

        st.session_state.chat_history.append(("assistant", answer))
        log_interaction(user_input, answer, source_file, best_doc["faiss_score"])


for role, msg in st.session_state.chat_history:
    st.chat_message(role).markdown(msg)
st.markdown("---")
st.markdown("### üìä Konu≈üma Kayƒ±tlarƒ±")

if os.path.exists("logs/conversation_log.csv"):
    try:
        df_logs = pd.read_csv("logs/conversation_log.csv")
        st.download_button(
            label="üì• Loglarƒ± CSV olarak indir",
            data=df_logs.to_csv(index=False).encode("utf-8"),
            file_name="conversation_log.csv",
            mime="text/csv"
        )
    except Exception as e:
        st.warning(f"Log dosyasƒ± okunurken hata olu≈ütu: {e}")
else:
    st.info("Hen√ºz herhangi bir log dosyasƒ± bulunmuyor.")